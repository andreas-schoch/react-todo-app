{"version":3,"sources":["components/TodoItem/index.js","components/TodoList/index.js","components/AddTodoForm/index.js","components/Filter/FilterButton/index.js","components/Filter/index.js","components/Footer/index.js","components/App/index.js","serviceWorker.js","store/index.js","index.js"],"names":["connect","_ref","todo","dispatch","_useState","useState","text","_useState2","Object","slicedToArray","todoInputText","setTodoInputText","_useState3","_useState4","editMode","setEditMode","_useState5","_useState6","test","setTest","useEffect","react_default","a","createElement","className","completed","onClick","evt","type","payload","value","onChange","target","title","state","todos","activeFilter","filters","find","filter","active","name","getFilteredTodos","map","src_components_TodoItem","key","id","AddTodoForm","todoText","onChangeHandler","_this","setState","todoTextValid","length","addTodo","preventDefault","newTodo","props","placeholder","this","Component","FilterButton","data-filter-name","filterName","getAttribute","i","components_Filter_FilterButton","Footer","href","rel","App","Fragment","src_components_AddTodoForm","src_components_Filter","src_components_TodoList","src_components_Footer","Boolean","window","location","hostname","match","initial","uuid","persistedState","localStorage","getItem","JSON","parse","reducer","combineReducers","arguments","undefined","action","newState","toConsumableArray","concat","console","log","index","findIndex","splice","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","setItem","stringify","getState","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VA2EeA,gBAtEE,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,SAAeC,EACKC,mBAASH,EAAKI,MADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAC9BM,EAD8BH,EAAA,GACfI,EADeJ,EAAA,GAAAK,EAELP,oBAAS,GAFJQ,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE9BE,EAF8BD,EAAA,GAEpBE,EAFoBF,EAAA,GAAAG,EAGbX,mBAAS,GAHIY,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAG9BE,EAH8BD,EAAA,GAGxBE,EAHwBF,EAAA,GAMrCG,oBAAU,aAEP,CAACN,EAAUI,IA2Bd,OACIG,EAAAC,EAAAC,cAAA,MAAIC,UAAY,cAAgBtB,EAAKuB,UAAY,iBAAmB,KAChEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAY,eAAiBE,QAZpB,SAAAC,GACpBzB,EAAKuB,YACNV,GAAaD,GACbH,EAAiBT,EAAKI,SASlB,UACAe,EAAAC,EAAAC,cAAA,UAAQC,UAAY,iBAAmBE,QA7BhC,SAAAC,GACfxB,EAAS,CAAEyB,KAAM,cAAeC,QAAS3B,MA4BjC,WAGJmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACTV,IAAaZ,EAAKuB,UACdJ,EAAAC,EAAAC,cAAA,YAAUO,MAAQpB,EAAgBc,UAAU,aAAaO,SAXjD,SAAAJ,GAAG,OAAIhB,EAAiBgB,EAAIK,OAAOF,UAY1CT,EAAAC,EAAAC,cAAA,KAAGU,MAAO/B,EAAKI,MAAOJ,EAAKI,MAGhCJ,EAAKuB,UAAYJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,UAAqD,IAG5EH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACTV,EACIO,EAAAC,EAAAC,cAAA,UAAQC,UAAY,eAAiBE,QAjC/B,SAAAC,GACpBzB,EAAKI,KAAOI,EACZP,EAAS,CAAEyB,KAAM,YAAaC,QAAS3B,IACvCa,GAAY,KA8BE,QACAM,EAAAC,EAAAC,cAAA,UAAQC,UAAY,eAAiBE,QAxC3B,SAAAC,GACxBzB,EAAKuB,WAAavB,EAAKuB,UACvBN,EAAQD,EAAK,GACbf,EAAS,CAAEyB,KAAM,YAAaC,QAAS3B,MAqC6CA,EAAKuB,UAAY,OAAS,YCzBvGzB,cAbS,SAACkC,GAOrB,MAAO,CACHC,MAPqB,WACrB,IAAOC,EAAeF,EAAMG,QAAQC,KAAM,SAAAC,GAAM,OAAsB,IAAlBA,EAAOC,SAC3D,MAA0B,QAAtBJ,EAAaK,KAAyBP,EAAMC,MACtB,YAAtBC,EAAaK,KAA6BP,EAAMC,MAAMI,OAAQ,SAAArC,GAAI,OAAKA,EAAKuB,YACtD,cAAtBW,EAAaK,KAA+BP,EAAMC,MAAMI,OAAQ,SAAArC,GAAI,OAAIA,EAAKuB,iBAAjF,EAGOiB,GACPL,QAASH,EAAMG,UAIRrC,CA3BE,SAAAC,GAAwBA,EAArBoC,QAAqB,IAAZF,EAAYlC,EAAZkC,MACzB,OACId,EAAAC,EAAAC,cAAA,MAAIC,UAAW,kBACTW,EAAMQ,IAAK,SAAAzC,GAAI,OAAImB,EAAAC,EAAAC,cAACqB,EAAD,CAAU1C,KAAOA,EAAO2C,IAAM3C,EAAK4C,kDCL9DC,oNACFb,MAAQ,CAAEc,SAAU,MAEpBC,gBAAkB,SAACtB,GAAD,OAASuB,EAAKC,SAAS,CAAEH,SAAUrB,EAAIK,OAAOF,WAEhEsB,cAAgB,WAAQ,OAAOF,EAAKhB,MAAMc,SAASK,OAAS,KAE5DC,QAAU,SAAC3B,GAEP,GADAA,EAAI4B,iBACAL,EAAKE,gBAAiB,CACtB,IAAMI,EAAU,CAAElD,KAAM4C,EAAKhB,MAAMc,SAAUvB,WAAW,GACxDyB,EAAKO,MAAMtD,SAAU,CAAEyB,KAAM,WAAYC,QAAS2B,IAClDN,EAAKC,SAAS,CAAEH,SAAU,+EAK9B,OACI3B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBACZH,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAO8B,YAAY,mBAAmB5B,MAAQ6B,KAAKzB,MAAMc,SACjEjB,SAAW4B,KAAKV,gBAAkBzB,UAAYmC,KAAKP,gBAAkB,QAAU,YAEnF/B,EAAAC,EAAAC,cAAA,UAAQG,QAAUiC,KAAKL,QAAU9B,UAAU,eAA3C,eAtBUoC,cA4BX5D,gBAAU+C,GCzBVc,eALM,SAAA5D,GAAgB,IAAbsC,EAAatC,EAAbsC,OACpB,OAAOlB,EAAAC,EAAAC,cAAA,UACHC,UAAW,kCAAoCe,EAAOC,OAAS,oBAAsB,IACrFsB,mBAAmBvB,EAAOE,MAASF,EAAOE,QCuBnCzC,cADS,SAACkC,GAAD,MAAY,CAACG,QAASH,EAAMG,UACrCrC,CAvBA,SAAAC,GAA2B,IAAxBoC,EAAwBpC,EAAxBoC,QAASlC,EAAeF,EAAfE,SAc3B,OAAOkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBE,QAbnB,SAACC,GACf,IAAMoC,EAAapC,EAAIK,OAAOgC,aAAa,oBAEvCD,IACA1B,EAAUA,EAAQM,IAAI,SAAAJ,GAElB,OADAA,EAAOC,OAAUD,EAAOE,OAASsB,EAC1BxB,IAGXpC,EAAS,CAAEyB,KAAM,aAAcC,QAASQ,OAKxChB,EAAAC,EAAAC,cAAA,aACEc,EAAQM,IAAK,SAACJ,EAAQ0B,GAAT,OAAe5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAc3B,OAASA,EAASM,IAAKoB,MACnE5C,EAAAC,EAAAC,cAAA,gBCfG4C,SALA,kBACX9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eACdH,EAAAC,EAAAC,cAAA,KAAG6C,KAAK,+DAA+DpC,OAAO,SAASqC,IAAI,sBAAsBpC,MAAM,eAAvH,kBCgBOqC,EAdH,WACR,OACIjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiD,SAAA,KACIlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,OAEJrD,EAAAC,EAAAC,cAACoD,EAAD,QCJQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8FCZAC,EAAU,CACZ5C,QAAS,CACL,CAAEI,KAAM,MAAOD,QAAQ,GACvB,CAAEC,KAAM,UAAWD,QAAQ,GAC3B,CAAEC,KAAM,YAAaD,QAAQ,IAEjCL,MAAO,CACH,CAAE7B,KAAM,gBAAiBmB,WAAW,EAAOqB,GAAIoC,OAC/C,CAAE5E,KAAM,gBAAiBmB,WAAW,EAAOqB,GAAIoC,OAC/C,CAAE5E,KAAM,gBAAiBmB,WAAW,EAAMqB,GAAIoC,OAC9C,CAAE5E,KAAM,gBAAiBmB,WAAW,EAAOqB,GAAIoC,SAIjDC,EAAiBC,aAAaC,QAAQ,cAAgBC,KAAKC,MAAMH,aAAaC,QAAQ,eAAiBJ,EAqCvGO,EAAUC,YAAgB,CAC5BtD,MApCgB,WAAwC,IAAvCD,EAAuCwD,UAAArC,OAAA,QAAAsC,IAAAD,UAAA,GAAAA,UAAA,GAAjCP,EAAehD,MAAOyD,EAAWF,UAAArC,OAAA,EAAAqC,UAAA,QAAAC,EAGlDE,EAAQrF,OAAAsF,EAAA,EAAAtF,CAAO0B,GAErB,OAAO0D,EAAOhE,MACV,IAAK,WAED,OADAgE,EAAO/D,QAAQiB,GAAKoC,MACbhD,EAAM6D,OAAOH,EAAO/D,SAE/B,IAAK,cACDmE,QAAQC,IAAIL,EAAO/D,SACnB,IAAMqE,EAAQL,EAASM,UAAU,SAAAjG,GAAI,OAAIA,EAAK4C,KAAO8C,EAAO/D,QAAQiB,KAEpE,OADAkD,QAAQC,IAAIJ,EAASO,OAAOF,EAAO,IAC5BL,EAEX,IAAK,YAGD,OADAA,EADU3D,EAAMiE,UAAU,SAAAjG,GAAI,OAAIA,EAAK4C,KAAO8C,EAAO/D,QAAQiB,MAC/C8C,EAAO/D,QACdgE,EAEX,QACI,OAAO3D,IAefG,QAXkB,WAA0C,IAAzCH,EAAyCwD,UAAArC,OAAA,QAAAsC,IAAAD,UAAA,GAAAA,UAAA,GAAnCP,EAAe9C,QAASuD,EAAWF,UAAArC,OAAA,EAAAqC,UAAA,QAAAC,EAC5D,OAAOC,EAAOhE,MACV,IAAK,aACD,OAAOgE,EAAO/D,QAClB,QACQ,OAAOK,MAUjBmE,EAAQC,YAAYd,EACtBX,OAAO0B,8BAAgC1B,OAAO0B,gCAKlDF,EAAMG,UAAU,kBAAMpB,aAAaqB,QAAQ,aAAcnB,KAAKoB,UAAUL,EAAMM,eAG/DN,QChEfO,IAASC,OACLxF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAUT,MAAQA,GACdhF,EAAAC,EAAAC,cAACwF,EAAD,OAGFC,SAASC,eAAe,SFoHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.095ff726.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport './index.css'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst TodoItem = ({ todo, dispatch }) => {\r\n    const [todoInputText, setTodoInputText] = useState(todo.text);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [test, setTest] = useState(1); // used to trigger useEffect which then triggers rerender \r\n\r\n    // hacky way to \"force\" rerender on change with functional components (editMode activated, completed, save edit)\r\n    useEffect(() => {\r\n        // console.log(\"change\");\r\n    }, [editMode, test])\r\n\r\n    const deleteTodo = evt => {\r\n        dispatch({ type: 'DELETE_TODO', payload: todo });\r\n    };\r\n\r\n    const completeTodoHandler = evt => {\r\n        todo.completed = !todo.completed;\r\n        setTest(test+1); // without this it doesn't rerender\r\n        dispatch({ type: 'EDIT_TODO', payload: todo });\r\n    };\r\n\r\n    const editTodoHandler = evt => {\r\n        todo.text = todoInputText;\r\n        dispatch({ type: 'EDIT_TODO', payload: todo });\r\n        setEditMode(false);\r\n    };\r\n\r\n    const enterEditModeHandler = evt => {\r\n        if (!todo.completed) { \r\n            setEditMode(!editMode);\r\n            setTodoInputText(todo.text);\r\n        }\r\n    }\r\n\r\n    const changeTextHandler = evt => setTodoInputText(evt.target.value);\r\n\r\n    return (\r\n        <li className={ 'todo-item ' + (todo.completed ? 'todo-item-done' : '')}>\r\n            <div className='btn-container'>\r\n                <button className={ 'btn btn-edit' } onClick={enterEditModeHandler}>&#9998;</button>\r\n                <button className={ 'btn btn-delete' } onClick={ deleteTodo }>&#10006;</button>    \r\n            </div>\r\n\r\n            <div className='todo-content'>\r\n                { editMode && !todo.completed\r\n                    ? <textarea value={ todoInputText } className='todo-input' onChange={changeTextHandler}/>\r\n                    :  <p title={todo.text}>{todo.text}</p>\r\n                }\r\n                \r\n                { todo.completed ? <div className='todo-check-overlay'>&#10008;</div> : '' }\r\n            </div>\r\n\r\n            <div className='todo-done-container'>\r\n                { editMode\r\n                    ? <button className={ 'btn btn-save' } onClick={ editTodoHandler }>Save</button>\r\n                    : <button className={ 'btn btn-done' } onClick={ completeTodoHandler }>{todo.completed ? 'Undo' : 'Done'}</button>\r\n                }\r\n            </div>\r\n        </li>\r\n    )\r\n};\r\n\r\n\r\n// not used, but React.memo could take a custom compare function as the second argument\r\n// const comparePrevNext = (prevProps, nextProps) => {\r\n//     return (\r\n//         prevProps.todo.text === nextProps.todo.text && \r\n//         prevProps.todo.completed === nextProps.todo.completed\r\n//     );\r\n// }\r\n\r\nexport default connect()(TodoItem);\r\n","import React from 'react'\r\nimport './index.css'\r\nimport TodoItem from '../TodoItem'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst TodoList = ({ filters, todos }) => {\r\n    return (\r\n        <ul className={'todo-container'}>\r\n            { todos.map( todo => <TodoItem todo={ todo } key={ todo.id } /> ) }\r\n        </ul>\r\n    )\r\n};\r\n\r\n\r\nTodoList.propTypes  = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    const getFilteredTodos = () => {\r\n        const  activeFilter = state.filters.find( filter => filter.active === true );\r\n        if (activeFilter.name === 'all') { return state.todos; }\r\n        if (activeFilter.name === 'pending') { return state.todos.filter( todo => !todo.completed ); }\r\n        if (activeFilter.name === 'completed') { return state.todos.filter( todo => todo.completed ); }\r\n     }\r\n    return {\r\n        todos: getFilteredTodos(),\r\n        filters: state.filters,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TodoList);\r\n// export default React.memo(connect(mapStateToProps)(TodoList)); // memo can prevent unnecessary rerenders. Not necessary here.\r\n","import React, {Component} from 'react'\r\nimport './index.css'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nclass AddTodoForm extends Component {\r\n    state = { todoText: '' }\r\n\r\n    onChangeHandler = (evt) => this.setState({ todoText: evt.target.value });\r\n\r\n    todoTextValid = () => { return this.state.todoText.length > 3 }\r\n\r\n    addTodo = (evt) => {\r\n        evt.preventDefault();\r\n        if (this.todoTextValid()) {\r\n            const newTodo = { text: this.state.todoText, completed: false };\r\n            this.props.dispatch( { type: 'ADD_TODO', payload: newTodo } );\r\n            this.setState({ todoText: '' });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className='new-todo-form'>\r\n                <input type='text' placeholder='Enter a new Todo' value={ this.state.todoText } \r\n                    onChange={ this.onChangeHandler } className={ this.todoTextValid() ? 'valid' : 'invalid'} />\r\n\r\n                <button onClick={ this.addTodo } className='btn btn-add'>Add</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect()(AddTodoForm);\r\n","import React from 'react'\r\nimport './index.css'\r\n\r\nconst FilterButton = ({ filter }) => {\r\n    return <button \r\n        className={'btn btn-filter btn-filter-all ' + (filter.active ? 'btn-filter-active' : '')} \r\n        data-filter-name={ filter.name }>{ filter.name }</button> }\r\n\r\nexport default FilterButton;\r\n","import React from 'react'\r\nimport './index.css'\r\nimport FilterButton from './FilterButton'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst Filter = ({ filters, dispatch }) => {\r\n    const setFilter = (evt) => {\r\n        const filterName = evt.target.getAttribute('data-filter-name');\r\n\r\n        if (filterName) {\r\n            filters = filters.map(filter => {\r\n                filter.active = (filter.name === filterName);\r\n                return filter;\r\n            });\r\n            \r\n            dispatch({ type: 'SET_FILTER', payload: filters })\r\n        }\r\n    }\r\n\r\nreturn <div className='filter-container' onClick={ setFilter }>\r\n            <span></span>\r\n            { filters.map( (filter, i) => <FilterButton filter={ filter } key={i} />)}\r\n            <span></span>\r\n        </div>\r\n}\r\n    \r\n\r\nconst mapStateToProps = (state) => ({filters: state.filters});\r\nexport default connect(mapStateToProps)(Filter);\r\n","import React from 'react'\r\nimport './index.css'\r\n\r\nconst Footer = () => (\r\n    <footer className='main-footer'>\r\n        <a href='https://github.com/andreas-schoch/react-todo-app/tree/master' target=\"_blank\" rel=\"noopener noreferrer\" title='Source Code'>Source Code</a>\r\n    </footer>\r\n);\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport TodoList from '../TodoList';\r\nimport AddTodoForm from '../../components/AddTodoForm';\r\nimport Filter from '../Filter';\r\nimport Footer from '../Footer';\r\n\r\nconst App = () => {   \r\n    return (\r\n        <>\r\n            <div className='todo-list-wrapper'>\r\n                <h1>React Todo App</h1>\r\n                <AddTodoForm />\r\n                <Filter />\r\n                <TodoList />\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers, createStore } from 'redux'\r\nimport uuid from 'uuid'\r\n\r\n\r\n\r\n// only used when no previous redux state found in local storage\r\nconst initial = {\r\n    filters: [\r\n        { name: 'all', active: true },\r\n        { name: 'pending', active: false },\r\n        { name: 'completed', active: false }\r\n    ],\r\n    todos: [\r\n        { text: \"default todo1\", completed: false, id: uuid() }, // using a single hashmap with the id as key might be better\r\n        { text: \"default todo2\", completed: false, id: uuid() },\r\n        { text: \"default todo3\", completed: true, id: uuid() },\r\n        { text: \"default todo4\", completed: false, id: uuid() }\r\n    ]\r\n}\r\n\r\nconst persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : initial;\r\n\r\nconst todoReducer = (state=persistedState.todos, action) => {\r\n    // Note: payload is always a todo object, the id identifies it for existing ones\r\n    // in case of adding a todo, a new id will be created here (if you pass one it will be overwritten)\r\n    const newState = [...state];\r\n\r\n    switch(action.type) {\r\n        case 'ADD_TODO':\r\n            action.payload.id = uuid();\r\n            return state.concat(action.payload);\r\n\r\n        case 'DELETE_TODO':\r\n            console.log(action.payload);\r\n            const index = newState.findIndex(todo => todo.id === action.payload.id );\r\n            console.log(newState.splice(index, 1));\r\n            return newState;\r\n\r\n        case 'EDIT_TODO':\r\n            const i = state.findIndex(todo => todo.id === action.payload.id);\r\n            newState[i] = action.payload;\r\n            return newState;\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst filterReducer = (state=persistedState.filters, action) => {\r\n    switch(action.type) {\r\n        case 'SET_FILTER':\r\n            return action.payload;\r\n        default:\r\n                return state;\r\n    }\r\n}\r\n\r\nconst reducer = combineReducers({\r\n    todos: todoReducer,\r\n    filters: filterReducer\r\n});\r\n\r\n\r\nconst store = createStore(reducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // connect to Redux Chrome Extension\r\n); \r\n\r\n\r\n// save state in local storage on every state change (debouncing not necessary in this simple app)\r\nstore.subscribe(() => localStorage.setItem('reduxState', JSON.stringify(store.getState() )));\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}